# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
      - name: Find source files
        run: find .
        
      - name: Install QT6
        uses: jurplel/install-qt-action@v3
      
        with:
          version: 6.6.*
          modules: qtpdf
      
      -   name: Install dependencies
          run: |
            sudo apt-get update -yq &&
            sudo apt-get install libmagick++-dev libssh-dev libtesseract-dev libpoppler-cpp-dev
            
      -   name: Install ImageMagick 7
          run:  |
                wget https://github.com/ImageMagick/ImageMagick/archive/refs/tags/7.1.0-31.tar.gz && \
                tar xzf 7.1.0-31.tar.gz && \
                rm 7.1.0-31.tar.gz && \
                apt-get clean && \
                apt-get autoremove

                RUN sh ./ImageMagick-7.1.0-31/configure --prefix=/usr/local --with-bzlib=yes --with-fontconfig=yes --with-freetype=yes --with-gslib=yes --with-gvc=yes --with-jpeg=yes --with-jp2=yes --with-png=yes --with-tiff=yes --with-xml=yes --with-gs-font-dir=yes && \
                make -j && make install && ldconfig /usr/local/lib/
        
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      
      - name: Prepare for Build
        run: cmake -S . -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --target all --config Release -- -j4

